/* OpenRoadSynth - The free road noise synthisizer
 Copyright (C) 2016  Gustav Grundfelt

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */
package se.grundfelt.openroadsynth;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.net.URL;
import javax.swing.ImageIcon;

/**
 *
 * @author gln
 */
public class SystemInfoFrame extends javax.swing.JFrame {

    private StringBuilder strB = new StringBuilder();
    public static long SOUNDCARD_TIME;
    public static long ANALYSE_TIME;
    public static long SAMPLES_PER_SECOND_TIME;

    /**
     * Creates new form SystemInfoFrame
     */
    SystemInfoFrame() {
        initComponents();
        this.updateSystemInfo();
        
        //Set icon
        URL iconURL = getClass().getResource("icon_24x24.png");
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());
        
        //CENTER THE JFRAME
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        //this.getContentPane().setBackground(new Color(190, 190, 215));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSystemInfo = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButtonCopy = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        jTextAreaSystemInfo.setEditable(false);
        jTextAreaSystemInfo.setColumns(20);
        jTextAreaSystemInfo.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jTextAreaSystemInfo.setRows(5);
        jTextAreaSystemInfo.setText("test");
        jScrollPane1.setViewportView(jTextAreaSystemInfo);

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 153, 0)));

        jButtonCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/copy-26.png"))); // NOI18N
        jButtonCopy.setToolTipText("Copies the text to the Clipboard");
        jButtonCopy.setBorder(null);
        jButtonCopy.setBorderPainted(false);
        jButtonCopy.setContentAreaFilled(false);
        jButtonCopy.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyActionPerformed(evt);
            }
        });

        jButtonUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/available_updates-26.png"))); // NOI18N
        jButtonUpdate.setToolTipText("Updates the system info (Calculation speed info)");
        jButtonUpdate.setBorder(null);
        jButtonUpdate.setBorderPainted(false);
        jButtonUpdate.setContentAreaFilled(false);
        jButtonUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/exit-26.png"))); // NOI18N
        jButtonClose.setToolTipText("Exits this window");
        jButtonClose.setBorder(null);
        jButtonClose.setBorderPainted(false);
        jButtonClose.setContentAreaFilled(false);
        jButtonClose.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonClose, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyActionPerformed
        this.copyToClipboard();
    }//GEN-LAST:event_jButtonCopyActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        this.updateSystemInfo();
    }//GEN-LAST:event_jButtonUpdateActionPerformed
    /** Copy SystemInfo to clipboard */
    public void copyToClipboard() {
        StringSelection selection = new StringSelection(strB.toString());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, null);
    }

    public void appendString(String srt) {
        jTextAreaSystemInfo.setText("");
        strB.append(srt);
        jTextAreaSystemInfo.setText(strB.toString());
    }

    private void updateSystemInfo() {
        strB = new StringBuilder();

        jTextAreaSystemInfo.setText("");

        strB.append("OS: ");
        strB.append(System.getProperty("os.name")).append("\n");
        strB.append("OS Version: ");
        strB.append(System.getProperty("os.version")).append("\n");
        strB.append("OS Architecture: ");
        strB.append(System.getProperty("os.arch")).append("\n");
        strB.append("\n");
        strB.append("Processor: ");
        strB.append(System.getenv("PROCESSOR_IDENTIFIER")).append("\n");
        strB.append("Processor Architecture: ");
        strB.append(System.getenv("PROCESSOR_ARCHITECTURE")).append("\n");
        strB.append("Processor cores: ");
        strB.append(Runtime.getRuntime().availableProcessors()).append("\n");
        strB.append("\n");
        strB.append("Java JRE Version: ");
        strB.append(System.getProperty("java.version")).append("\n");
        strB.append("\n");

        //From http://viralpatel.net/blogs/getting-jvm-heap-size-used-memory-total-memory-using-java-runtime/
        int mb = 1024 * 1024;

        //Getting the runtime reference from system
        Runtime runtime = Runtime.getRuntime();
        strB.append("Runtime memory used [MB]: ").append((runtime.totalMemory() - runtime.freeMemory()) / mb).append("\n");
        strB.append("Runtime memory free [MB]: ").append((runtime.freeMemory() / mb)).append("\n");
        strB.append("Runtime memory available [MB]: ").append((runtime.totalMemory() / mb)).append("\n");
        strB.append("Runtime memory max [MB]: ").append((runtime.maxMemory() / mb)).append("\n");
        strB.append("\n");

        //Add Results from performance measurements
        strB.append("Time* to send 5513 samples [LmaxF @ 44.1 kHz] to SoundCard [ms]: ").append(SOUNDCARD_TIME / 1E6).append("\n");
        strB.append("Time* to analyse 5513 samples [LmaxF @ 44.1 kHz] [ms]: ").append(ANALYSE_TIME / 1E6).append("\n");
        strB.append("Calculation speed* [Samples per second @ 44.1 kHz]: ").append(SAMPLES_PER_SECOND_TIME).append("\n");
        strB.append("(* Zeros = Task hasn't been performed yet)");
        
        jTextAreaSystemInfo.setText(strB.toString());
    }

    //from http://stackoverflow.com/questions/2591083/getting-version-of-java-in-runtime

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonCopy;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaSystemInfo;
    // End of variables declaration//GEN-END:variables
}
