/* OpenRoadSynth - The free road noise synthisizer
 Copyright (C) 2016  Gustav Grundfelt

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */
package se.grundfelt.openroadsynth;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URL;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author Gustav Grundfelt
 */
public class CpxFrame extends javax.swing.JFrame {

    private boolean wasChanged; //Flag for change detection


    /**
     * Creates new form CpxFrame
     */
    public CpxFrame() {
//        
        initComponents();

        //Set icon
        URL iconURL = getClass().getResource("icon_24x24.png");
        ImageIcon icon = new ImageIcon(iconURL);
        this.setIconImage(icon.getImage());

        ExcelAdapter ea = new ExcelAdapter(jTableCpx);
        loadCpxDataFile();
        setTableListener();
        setTableSettings();
        setTableRendering();
        wasChanged = false;

        //CENTER THE JFRAME
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        //Set Background color
        //this.getContentPane().setBackground(new Color(190, 190, 215));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelSel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCpx = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonAddRow = new javax.swing.JButton();
        jButtonRemoveSelectedRow = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButtonMoveSelectedRowUp = new javax.swing.JButton();
        jButtonMoveSelectedRowDown = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonCalcdBA1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonCalcdBA2 = new javax.swing.JButton();
        jCheckBoxUseComma = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButtonCalcdBA = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButtonSaveAndClose = new javax.swing.JButton();
        jButtonHelp = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CPX database editor");
        setBackground(new java.awt.Color(51, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(255, 153, 0)));

        jLabelSel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelSel.setText("text text text");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSel, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(979, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTableCpx.setBackground(new java.awt.Color(153, 153, 153));
        jTableCpx.setForeground(new java.awt.Color(102, 153, 255));
        jTableCpx.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Vel. km/h", "Sum dBA", "25", "31.5", "40", "50", "63", "80", "100", "125", "163", "200", "250", "315", "400", "500", "630", "800", "1k", "1.25k", "1.63k", "2k", "2.5k", "3.15k", "4k", "5k", "6.3k", "8k", "10k", "12.5k", "16k"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCpx.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableCpx.setAutoscrolls(false);
        jTableCpx.setCellSelectionEnabled(true);
        jTableCpx.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableCpx.setDoubleBuffered(true);
        jTableCpx.getTableHeader().setReorderingAllowed(false);
        jTableCpx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCpxMouseClicked(evt);
            }
        });
        jTableCpx.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableCpxPropertyChange(evt);
            }
        });
        jTableCpx.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableCpxKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCpx);
        jTableCpx.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTableCpx.getColumnModel().getColumnCount() > 0) {
            jTableCpx.getColumnModel().getColumn(0).setPreferredWidth(200);
            jTableCpx.getColumnModel().getColumn(1).setPreferredWidth(120);
            jTableCpx.getColumnModel().getColumn(2).setPreferredWidth(110);
            jTableCpx.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(6).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(7).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(8).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(9).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(10).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(11).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(12).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(13).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(14).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(15).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(16).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(17).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(18).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(19).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(20).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(21).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(22).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(23).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(24).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(25).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(26).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(27).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(28).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(29).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(30).setPreferredWidth(40);
            jTableCpx.getColumnModel().getColumn(31).setPreferredWidth(40);
        }

        jPanel7.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(255, 153, 0)));

        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 153, 0)));

        jButtonAddRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/Add_Row-26.png"))); // NOI18N
        jButtonAddRow.setToolTipText("Add row");
        jButtonAddRow.setBorderPainted(false);
        jButtonAddRow.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRowActionPerformed(evt);
            }
        });

        jButtonRemoveSelectedRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/Delete_Row-26.png"))); // NOI18N
        jButtonRemoveSelectedRow.setToolTipText("Remove row");
        jButtonRemoveSelectedRow.setBorderPainted(false);
        jButtonRemoveSelectedRow.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonRemoveSelectedRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveSelectedRowActionPerformed(evt);
            }
        });

        jLabel1.setText("Add/Delete row");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonAddRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonRemoveSelectedRow))
                    .addComponent(jLabel1))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRemoveSelectedRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAddRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 153, 0)));

        jLabel2.setText("Move row");

        jButtonMoveSelectedRowUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/up-26.png"))); // NOI18N
        jButtonMoveSelectedRowUp.setToolTipText("Move row up");
        jButtonMoveSelectedRowUp.setBorderPainted(false);
        jButtonMoveSelectedRowUp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonMoveSelectedRowUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveSelectedRowUpActionPerformed(evt);
            }
        });

        jButtonMoveSelectedRowDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/down-26.png"))); // NOI18N
        jButtonMoveSelectedRowDown.setToolTipText("Move row down");
        jButtonMoveSelectedRowDown.setBorderPainted(false);
        jButtonMoveSelectedRowDown.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButtonMoveSelectedRowDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveSelectedRowDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButtonMoveSelectedRowDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonMoveSelectedRowUp)
                .addGap(14, 14, 14))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonMoveSelectedRowDown)
                    .addComponent(jButtonMoveSelectedRowUp))
                .addGap(3, 3, 3))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 153, 0)));

        jButtonCalcdBA1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/copy-26.png"))); // NOI18N
        jButtonCalcdBA1.setText("All");
        jButtonCalcdBA1.setToolTipText("Copy all");
        jButtonCalcdBA1.setBorderPainted(false);
        jButtonCalcdBA1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcdBA1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Copy content");

        jButtonCalcdBA2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/copy-26.png"))); // NOI18N
        jButtonCalcdBA2.setText("Header");
        jButtonCalcdBA2.setToolTipText("Copy just Headers");
        jButtonCalcdBA2.setBorderPainted(false);
        jButtonCalcdBA2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcdBA2ActionPerformed(evt);
            }
        });

        jCheckBoxUseComma.setText("Use comma");
        jCheckBoxUseComma.setToolTipText("Otherwise \".\" will be used");
        jCheckBoxUseComma.setActionCommand(" comma as separator");
        jCheckBoxUseComma.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBoxUseComma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseCommaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButtonCalcdBA1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCalcdBA2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxUseComma))
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCalcdBA1)
                    .addComponent(jButtonCalcdBA2)
                    .addComponent(jCheckBoxUseComma))
                .addGap(3, 3, 3))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 153, 0)));

        jLabel4.setText("Perform calculation");

        jButtonCalcdBA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/calculator-26.png"))); // NOI18N
        jButtonCalcdBA.setText("dB(A)");
        jButtonCalcdBA.setToolTipText("Calculate the total dB(A) SPL of selected row/rows");
        jButtonCalcdBA.setBorderPainted(false);
        jButtonCalcdBA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcdBAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCalcdBA)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCalcdBA)
                .addGap(3, 3, 3))
        );

        jButtonSaveAndClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/exit-26.png"))); // NOI18N
        jButtonSaveAndClose.setText("Save and exit");
        jButtonSaveAndClose.setToolTipText("Save and exit");
        jButtonSaveAndClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveAndCloseActionPerformed(evt);
            }
        });

        jButtonHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/info-26.png"))); // NOI18N
        jButtonHelp.setText("Input info");
        jButtonHelp.setToolTipText("Format information");
        jButtonHelp.setBorder(null);
        jButtonHelp.setFocusPainted(false);
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });

        jButtonCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/se/grundfelt/openroadsynth/cancel-26.png"))); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.setToolTipText("Close without saving changes");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonHelp, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSaveAndClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSaveAndClose, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean getChange() {
        return wasChanged;
    }

    public void changeWasNoticed() {
        wasChanged = false;
    }

    private void setTableListener() {
        jTableCpx.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();

                if (column > 0) {
                    TableModel model = (TableModel) e.getSource();
                    Object data = model.getValueAt(row, column);
                    String str = data.toString();
                    if (column == 1) { //First column integer
                        str = NumericHelper.makeToInteger(str);
                    }
                    if (column > 1) { //Then Doubles
                        str = NumericHelper.makeToDouble(str);
                    }
                    model.removeTableModelListener(this);
                    model.setValueAt(str, row, column);
                    model.addTableModelListener(this);

                }
            }
        });
    }

    private void setTableSettings() {
        jTableCpx.setAutoCreateRowSorter(true);
        //jTableCpx.setColumnSelectionAllowed(false);
        jLabelSel.setText("");
    }

    //http://stackoverflow.com/questions/14449334/color-selected-row-in-jtable-by-another-color
    private void setTableRendering() {
        jTableCpx.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                Color lightBlue = new Color(153, 204, 255);
                Color nimbusBase = new Color(255, 255, 255);
                Color nimbusBase2 = new Color(200, 200, 200);
                
               

                c.setBackground(row % 2 == 0 ? nimbusBase2 : nimbusBase);

                if (table.isCellSelected(row, column)) {
                    c.setForeground(Color.WHITE);
                    c.setBackground(new Color(199, 21, 133));
                } else if (table.isRowSelected(row)) {
                    c.setForeground(Globals.TABLE_TEXT_COLOR);
                    c.setBackground(lightBlue);
                } else {
                    c.setForeground(Globals.TABLE_TEXT_COLOR);
                }
                JComponent jc = (JComponent) c;
                jc.setToolTipText(jTableCpx.getValueAt(row, column).toString());

                return c;
            }
        });
    }

    private void moveSelectedRowUp() {

        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();
        int row = jTableCpx.getSelectedRow();
        int col = jTableCpx.getSelectedColumn();
        int n_rows = jTableCpx.getRowCount();
        if (row > 0) {
            model.moveRow(row, row, row - 1);
            jTableCpx.changeSelection(row - 1, col, false, false);
        }
        printTableStats();
    }

    private void moveSelectedRowDown() {
        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();
        int row = jTableCpx.getSelectedRow();
        int col = jTableCpx.getSelectedColumn();
        int n_rows = jTableCpx.getRowCount();
        if ((row + 1) < n_rows) {
            model.moveRow(row, row, row + 1);
            jTableCpx.changeSelection(row + 1, col, false, false);
        }
        printTableStats();
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void jTableCpxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCpxMouseClicked
        //fixTableDataTable();
        printTableStats();
    }//GEN-LAST:event_jTableCpxMouseClicked

    private void jTableCpxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCpxKeyPressed
        printTableStats();
        //fixTableDataTable();
    }//GEN-LAST:event_jTableCpxKeyPressed

    private void jTableCpxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableCpxPropertyChange
        printTableStats();
    }//GEN-LAST:event_jTableCpxPropertyChange

    private void jButtonMoveSelectedRowDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveSelectedRowDownActionPerformed
        moveSelectedRowDown();
    }//GEN-LAST:event_jButtonMoveSelectedRowDownActionPerformed

    private void jButtonMoveSelectedRowUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveSelectedRowUpActionPerformed
        moveSelectedRowUp();
    }//GEN-LAST:event_jButtonMoveSelectedRowUpActionPerformed

    private void jButtonRemoveSelectedRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveSelectedRowActionPerformed
        removeSelectedCpxRow();
    }//GEN-LAST:event_jButtonRemoveSelectedRowActionPerformed

    private void jButtonAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRowActionPerformed
        addCpxRow();
    }//GEN-LAST:event_jButtonAddRowActionPerformed

    private void jCheckBoxUseCommaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseCommaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxUseCommaActionPerformed

    private void jButtonSaveAndCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveAndCloseActionPerformed

        saveTable();
        this.setVisible(false);
    }//GEN-LAST:event_jButtonSaveAndCloseActionPerformed

    private void jButtonCalcdBA2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcdBA2ActionPerformed
        copyToClipboard(false);
    }//GEN-LAST:event_jButtonCalcdBA2ActionPerformed

    private void jButtonCalcdBA1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcdBA1ActionPerformed
        copyToClipboard(true);
    }//GEN-LAST:event_jButtonCalcdBA1ActionPerformed

    private void jButtonCalcdBAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcdBAActionPerformed
        calcDbA();
    }//GEN-LAST:event_jButtonCalcdBAActionPerformed

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed
        JOptionPane.showMessageDialog(this,
            "Use this table to give RoadSynth access to your CPX data.\n"
            + "You can paste data from other spreadsheet software. Just copy (Crtl + c) and paste (Crtl + v)\n\n"
            + "1) CPX data shoud be A-weighted and entered as 1/3 octave bands between 25 and 16 kHz.\n"
            + "2) CPX data should be normalised so that the 'Sum dBA' corresponds to to the sound pressure\n"
            + "level, LAmax(fast), 10 meter from a vehicle pass by.\n"
            + "\n"
            +"We strongly recommend to make backups of all your CPX data",
            "Format info",
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonHelpActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed
    public void removeSelectedCpxRow() {
        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();
        int row = jTableCpx.getSelectedRow();
        if (row >= 0) {
            model.removeRow(row);
        }
        printTableStats();
    }

    public void copyToClipboard(Boolean copyEntireTable) {
        Clipboard clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();
        String clipBoardString = "";
        int n_rows = jTableCpx.getRowCount();
        int n_cols = jTableCpx.getColumnCount();
        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();

        //Get Header value
        for (int i_col = 0; i_col < n_cols; i_col++) {
            clipBoardString += model.getColumnName(i_col);
            clipBoardString += "\t";
        }
        jLabelSel.setText("Table headers was exported to Clipboard");

        if (copyEntireTable) {
            //Get the rest of the table
            for (int i_row = 0; i_row < n_rows; i_row++) {
                clipBoardString += "\n";
                for (int i_col = 0; i_col < n_cols; i_col++) {
                    clipBoardString += model.getValueAt(i_row, i_col).toString();
                    clipBoardString += "\t";
                    //System.out.printf(String.valueOf(i_row) + "," + String.valueOf(i_col) + "    ");
                }
                //System.out.printf("\n");
            }
            jLabelSel.setText("Entire table was exported to Clipboard");

        }
        if (jCheckBoxUseComma.isSelected()) {
            clipBoardString = clipBoardString.replace(".", ",");
        }
        clipBoard.setContents(new StringSelection(clipBoardString), null);

    }

    /**
     * Returns a double array containing the spectrum from the database for the
     * selected road
     */
    public double[] getLinearSpectrum(int rowIndex) {

        int n_band = 29; //number of one/third octave bands
        double[] spectrum = new double[29];
        int colStart = 3; //Columns where sprctrum begins

        double[] weightA = {-44.7D, -39.4D, -34.6D, -30.2D, -26.2D, -22.5D, -19.1D, -16.1D, -13.4D, -10.9D, -8.6D, -6.6D, -4.8D, -3.2D, -1.9D, -0.8D, 0.0D, 0.6D, 1.0D, 1.2D, 1.3D, 1.2D, 1.0D, 0.5D, -0.1D, -1.1D, -2.5D, -4.3D, -6.6D, -9.3D};

        for (int i_col = 0; i_col < n_band; i_col++) {
            spectrum[i_col] = Double.parseDouble(jTableCpx.getValueAt(rowIndex, i_col + colStart).toString()) - weightA[i_col];
        }
        return spectrum;
    }

    /**
     * Returns the speed for the selected row
     */
    public int getSpeedInKmph(int rowIndex) {
        return Integer.parseInt(jTableCpx.getValueAt(rowIndex, 1).toString());
    }

    /**
     * Returns a sting array containing the avaliable data in the database
     */
    public String[] getStringsForMenu() {
        int n_rows = jTableCpx.getRowCount();
        String[] strings = new String[n_rows];

        for (int i_row = 0; i_row < n_rows; i_row++) {
            strings[i_row] = jTableCpx.getValueAt(i_row, 0).toString() + " (" + jTableCpx.getValueAt(i_row, 1).toString() + " km/h)";
        }
        return strings;
    }

    private void calcDbA() {
        int rows[] = jTableCpx.getSelectedRows();
        int n_cols = jTableCpx.getColumnCount();
        String strTmp, strValue;
        double retValue;
        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();
        double d[] = new double[29];
        for (int i = 0; i < rows.length; i++) {
            for (int i_col = 3; i_col < n_cols; i_col++) {
                strTmp = model.getValueAt(rows[i], i_col).toString();
                d[i_col - 3] = Double.parseDouble(strTmp);
            }
            retValue = SignalToolbox.getDecibels(d);
            retValue = Math.round(retValue * 100d) / 100.0d;
            strValue = String.valueOf(retValue);
            model.setValueAt(strValue, rows[i], 2);
        }
    }

    private void fixTableDataTable() {
        int n_rows = jTableCpx.getRowCount();
        int n_cols = jTableCpx.getColumnCount();

        String value;

        for (int i_row = 0; i_row < n_rows; i_row++) {
            for (int i_col = 1; i_col < n_cols; i_col++) {
                value = jTableCpx.getValueAt(i_row, i_col).toString();
                if (i_col == 1) {
                    value = NumericHelper.makeToInteger(value);
                } else {
                    value = NumericHelper.makeToDouble(value);
                }
                jTableCpx.setValueAt(value, i_row, i_col);
                //System.out.printf(String.valueOf(i_row) + "," + String.valueOf(i_col) + "    ");
            }
            //System.out.printf("\n");
        }
        //System.out.printf("\n\n");

    }

    public void addCpxRow() {
        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();
        int selectedRow = jTableCpx.getSelectedRow();
        int selectedCol = jTableCpx.getSelectedColumn();
        int lastRow = jTableCpx.getRowCount();
        model.addRow(new String[]{"my new data", "70", "40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"});
        model.moveRow(lastRow, lastRow, selectedRow + 1);
        jTableCpx.changeSelection(selectedRow + 1, selectedCol, false, false);
        printTableStats();
    }

    /**
     * Loads the database from the file
     */
    public void loadCpxDataFile() {
        DefaultTableModel model = (DefaultTableModel) this.jTableCpx.getModel();

        //First clear table
        model.setRowCount(0);

        String Path = new File("").getAbsolutePath() + "\\data.cpx";
        File file = new File(Path);
        //jLabelSel.setText(file.getPath());
        String line;
        BufferedReader reader;

        try {
            reader = new BufferedReader(new FileReader(file));
            int row = 0;

            while ((line = reader.readLine()) != null) {
                addCpxRow(); //add row to table
                int strStart = 0;
                int strEnd = 0;
                String tmpStr;
                int col = 0;

                //for each char in the line
                for (int i_char = 0; i_char < line.length(); i_char++) {
                    if (line.charAt(i_char) != '\t') {
                        strEnd = i_char;
                    } else {
                        tmpStr = line.substring(strStart, strEnd + 1);
                        strStart = i_char + 1;

                        jTableCpx.setValueAt(tmpStr, row, col);

                        //System.out.println(tmpStr);
                        col++;
                    }

                }
                row++;
            }
            reader.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Couldn't load the cpx database. IO Error!");
        }
    }

    public void saveTable() {
        fixTableDataTable();
        createBackupOfOldFile();
        String Path = new File("").getAbsolutePath() + "\\data.cpx";
        File file = new File(Path);
        //jLabelSel.setText(file.getPath());
        try (BufferedWriter bfw = new BufferedWriter(new FileWriter(file))) {
            //for (int i = 0; i < jTableCpx.getColumnCount(); i++) {
            //    bfw.write(jTableCpx.getColumnName(i));
            //    bfw.write("\");
            //}

            for (int i_row = 0; i_row < jTableCpx.getRowCount(); i_row++) {
                for (int i_col = 0; i_col < jTableCpx.getColumnCount(); i_col++) {

                    if (i_col > 0) {
                        bfw.write(String.valueOf(jTableCpx.getValueAt(i_row, i_col)));
                    } else {
                        bfw.write((String) jTableCpx.getValueAt(i_row, i_col));
                    }

                    //Avoid a ':' at the end of the line
                    if (i_col < (jTableCpx.getColumnCount() - 1)) {
                        bfw.write("\t");
                    }
                }

                //Avoid a newLine at the end
                if (i_row < (jTableCpx.getRowCount() - 1)) {
                    bfw.newLine();
                }

            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Couldn't write to the cpx database. IO Error!");
        }
        wasChanged = true; //flag for the mainFrame
    }

    public void createBackupOfOldFile() {
        String Path1 = new File("").getAbsolutePath() + "\\data.cpx";
        File oldfile = new File(Path1);

        String Path2 = new File("").getAbsolutePath() + "\\data.bkp";
        File newfile = new File(Path2);

        // Remove the old backup
        if (newfile.exists()) {
            newfile.delete();
        }

        if (oldfile.exists()) {
            oldfile.renameTo(newfile);
            oldfile.delete();
        }
    }

    /**
     * Prints the row and col index for the user
     */
    private void printTableStats() {
        int row = jTableCpx.getSelectedRow();
        int col = jTableCpx.getSelectedColumn();
        int n_rows = jTableCpx.getRowCount();
        jLabelSel.setText("Cell: row " + String.valueOf(row) + " col " + String.valueOf(col) + "       Number of rows: " + String.valueOf(n_rows));

    }

    /**
     * CLASS FOR PASTING VALUES FROM EXCEL
     */
    public class ExcelAdapter implements ActionListener {

        private String rowstring, value;
        private Clipboard system;
        private StringSelection stsel;
        private JTable jTable1;

        /**
         * The Excel Adapter is constructed with a JTable on which it enables
         * Copy-Paste and acts as a Clipboard listener.
         *
         * @param myJTable
         */
        public ExcelAdapter(JTable myJTable) {
            jTable1 = myJTable;
            KeyStroke copy = KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK, false);
            // Identifying the copy KeyStroke user can modify this
            // to copy on some other Key combination.
            KeyStroke paste = KeyStroke.getKeyStroke(KeyEvent.VK_V, ActionEvent.CTRL_MASK, false);
            // Identifying the Paste KeyStroke user can modify this
            //to copy on some other Key combination.
            jTable1.registerKeyboardAction(this, "Copy", copy, JComponent.WHEN_FOCUSED);
            jTable1.registerKeyboardAction(this, "Paste", paste, JComponent.WHEN_FOCUSED);
            system = Toolkit.getDefaultToolkit().getSystemClipboard();
        }

        /**
         * Public Accessor methods for the Table on which this adapter acts.
         *
         * @return
         */
        public JTable getJTable() {
            return jTable1;
        }

        public void setJTable(JTable jTable1) {
            this.jTable1 = jTable1;
        }

        /**
         * This method is activated on the Keystrokes we are listening to in
         * this implementation. Here it listens for Copy and Paste
         * ActionCommands. Selections comprising non-adjacent cells result in
         * invalid selection and then copy action cannot be performed. Paste is
         * done by aligning the upper left corner of the selection with the 1st
         * element in the current selection of the JTable.
         *
         * @param e
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getActionCommand().compareTo("Copy") == 0) {
                StringBuilder sbf = new StringBuilder();
                // Check to ensure we have selected only a contiguous block of
                // cells
                int numcols = jTable1.getSelectedColumnCount();
                int numrows = jTable1.getSelectedRowCount();
                int[] rowsselected = jTable1.getSelectedRows();
                int[] colsselected = jTable1.getSelectedColumns();
                if (!((numrows - 1 == rowsselected[rowsselected.length - 1] - rowsselected[0]
                        && numrows == rowsselected.length)
                        && (numcols - 1 == colsselected[colsselected.length - 1] - colsselected[0]
                        && numcols == colsselected.length))) {
                    JOptionPane.showMessageDialog(null, "Invalid Copy Selection",
                            "Invalid Copy Selection",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                for (int i = 0; i < numrows; i++) {
                    for (int j = 0; j < numcols; j++) {
                        sbf.append(jTable1.getValueAt(rowsselected[i], colsselected[j]));
                        if (j < numcols - 1) {
                            sbf.append("\t");
                        }
                    }
                    sbf.append("\n");
                }
                stsel = new StringSelection(sbf.toString());
                system = Toolkit.getDefaultToolkit().getSystemClipboard();
                system.setContents(stsel, stsel);
            }
            if (e.getActionCommand().compareTo("Paste") == 0) {
                //System.out.println("Trying to Paste");
                int startRow = (jTable1.getSelectedRows())[0];
                int startCol = (jTable1.getSelectedColumns())[0];
                try {
                    String trstring = (String) (system.getContents(this).getTransferData(DataFlavor.stringFlavor));
                    //System.out.println("String is:" + trstring);
                    StringTokenizer st1 = new StringTokenizer(trstring, "\n");
                    for (int i = 0; st1.hasMoreTokens(); i++) {
                        rowstring = st1.nextToken();
                        StringTokenizer st2 = new StringTokenizer(rowstring, "\t");
                        for (int j = 0; st2.hasMoreTokens(); j++) {
                            value = (String) st2.nextToken();
                            if (startRow + i < jTable1.getRowCount()
                                    && startCol + j < jTable1.getColumnCount()) {
                                jTable1.setValueAt(value, startRow + i, startCol + j);
                            }
                            //System.out.println("Putting " + value + "atrow = " + startRow + i + "column =  " + startCol + j);
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddRow;
    private javax.swing.JButton jButtonCalcdBA;
    private javax.swing.JButton jButtonCalcdBA1;
    private javax.swing.JButton jButtonCalcdBA2;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonMoveSelectedRowDown;
    private javax.swing.JButton jButtonMoveSelectedRowUp;
    private javax.swing.JButton jButtonRemoveSelectedRow;
    private javax.swing.JButton jButtonSaveAndClose;
    private javax.swing.JCheckBox jCheckBoxUseComma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelSel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCpx;
    // End of variables declaration//GEN-END:variables
}
